<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.tedu.store.mapper.UserMapper">

    <resultMap id="UserEntityMap"
               type="cn.tedu.store.entity.User">
        <id column="uid" property="uid"/>
        <result column="is_delete" property="isDelete"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>

    <!-- 插入用户数据 -->
    <!-- Integer insert(User user) -->
    <insert id="insert"
            useGeneratedKeys="true"
            keyProperty="uid">
			INSERT INTO t_user (
				username, password,
				salt, gender,
				phone, email,
				avatar, is_delete,
				created_user, created_time,
				modified_user, modified_time
			) VALUES (
				#{username}, #{password},
				#{salt}, #{gender},
				#{phone}, #{email},
				#{avatar}, #{isDelete},
				#{createdUser}, #{createdTime},
				#{modifiedUser}, #{modifiedTime}
			)
	</insert>

	<!--根据用户uid修改个人信息并记录修改人和修改密码-->
	<!--Integer updateInfoByUid(User user)
		@param user 用户输入的信息
		@return 返回修改影响的行数-->
	<update id="updateInfoByUid">
			UPDATE
				t_user
			SET
				phone=#{phone},
				email=#{email},
				gender=#{gender},
				modified_user=#{modifiedUser},
				modified_time=#{modifiedTime}
			WHERE
				uid=#{uid}
	</update>

	<!-- 根据用户uid修改密码并记录修改人和修改密码 -->
	<!-- Integer updatePasswordByUid(
            @Param("uid") Integer uid,
            @Param("password") String password,
            @Param("modifiedUser") String modifiedUser,
            @Param("modifiedTime") Date modifiedTime) -->
    <update id="updatePasswordByUid">
			UPDATE
				t_user
			SET
				password=#{password},
				modified_user=#{modifiedUser},
				modified_time=#{modifiedTime}
			WHERE
				uid=#{uid}
	</update>

	<!-- 根据用户uid修改头像并记录修改人和修改密码 -->
	<!-- Integer updateAvatar(
			@Param("uid") Integer uid,
            @Param("avatar") String avatar,
            @Param("modifiedUser") String modifiedUser,
            @Param("modifiedTime") Date modifiedTime); -->
    <update id="updateAvatarByUid">
			UPDATE
				t_user
			SET
				avatar=#{avatar},
				modified_user=#{modifiedUser},
				modified_time=#{modifiedTime}
			WHERE
				uid=#{uid}
	</update>

    <!-- 根据用户uid查询用户数据 -->
    <!-- User findByUid(Integer uid) -->
    <select id="findByUid"
            resultMap="UserEntityMap">
			SELECT
				*
			FROM
				t_user
			WHERE
				uid=#{uid}
	</select>

	<!-- 根据用户名查询用户数据 -->
    <!-- User findByUsername(String username) -->
    <select id="findByUsername"
            resultMap="UserEntityMap">
			SELECT
				*
			FROM
				t_user
			WHERE
				username=#{username}
	</select>

</mapper>